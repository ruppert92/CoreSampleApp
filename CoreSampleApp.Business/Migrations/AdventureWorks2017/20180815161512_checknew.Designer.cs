// <auto-generated />
using System;
using CoreSampleApp.Business.Data.AdventureWorks2017;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreSampleApp.Business.Migrations.AdventureWorks2017
{
    [DbContext(typeof(AdventureWorks2017Context))]
    [Migration("20180815161512_checknew")]
    partial class checknew
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceID");

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Address_rowguid");

                    b.HasIndex("StateProvinceId");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvinceId", "PostalCode")
                        .IsUnique()
                        .HasFilter("[AddressLine2] IS NOT NULL");

                    b.ToTable("Address","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AddressTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_AddressType_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_AddressType_rowguid");

                    b.ToTable("AddressType","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.AdventureWorks2017Context+UserNameClass", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.HasKey("UserName");

                    b.ToTable("UserName");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.AwbuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemInformationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnName("Database Version")
                        .HasMaxLength(25);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationId");

                    b.ToTable("AWBuildVersion");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BillOfMaterialsID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Bomlevel")
                        .HasColumnName("BOMLevel");

                    b.Property<int>("ComponentId")
                        .HasColumnName("ComponentID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PerAssemblyQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValueSql("((1.00))");

                    b.Property<int?>("ProductAssemblyId")
                        .HasColumnName("ProductAssemblyID");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("BillOfMaterialsId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ComponentId");

                    b.HasIndex("UnitMeasureCode");

                    b.HasIndex("ProductAssemblyId", "ComponentId", "StartDate")
                        .IsUnique()
                        .HasName("AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("BillOfMaterials","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BusinessEntityID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntity_rowguid");

                    b.ToTable("BusinessEntity","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntityAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<int>("AddressTypeId")
                        .HasColumnName("AddressTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "AddressId", "AddressTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntityAddress_rowguid");

                    b.ToTable("BusinessEntityAddress","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntityContact", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonID");

                    b.Property<int>("ContactTypeId")
                        .HasColumnName("ContactTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "PersonId", "ContactTypeId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_BusinessEntityContact_rowguid");

                    b.ToTable("BusinessEntityContact","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ContactType", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("ContactTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ContactType_Name");

                    b.ToTable("ContactType","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_CountryRegion_Name");

                    b.ToTable("CountryRegion","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3);

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryRegionCode", "CurrencyCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("CountryRegionCurrency","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreditCardID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("ExpMonth");

                    b.Property<short>("ExpYear");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CreditCardId");

                    b.HasIndex("CardNumber")
                        .IsUnique()
                        .HasName("AK_CreditCard_CardNumber");

                    b.ToTable("CreditCard","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Culture", b =>
                {
                    b.Property<string>("CultureId")
                        .HasColumnName("CultureID")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("CultureId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Culture_Name");

                    b.ToTable("Culture","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("CurrencyCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Currency_Name");

                    b.ToTable("Currency","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CurrencyRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("money");

                    b.Property<DateTime>("CurrencyRateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("money");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.HasIndex("CurrencyRateDate", "FromCurrencyCode", "ToCurrencyCode")
                        .IsUnique()
                        .HasName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode");

                    b.ToTable("CurrencyRate","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),''))")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PersonId")
                        .HasColumnName("PersonID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("StoreId")
                        .HasColumnName("StoreID");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("AK_Customer_AccountNumber");

                    b.HasIndex("PersonId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Customer_rowguid");

                    b.HasIndex("StoreId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Customer","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DatabaseLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Tsql")
                        .IsRequired()
                        .HasColumnName("TSQL");

                    b.Property<string>("XmlEvent")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("DatabaseLogId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("DatabaseLog");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Department", b =>
                {
                    b.Property<short>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Department_Name");

                    b.ToTable("Department","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmailAddress", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailAddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress1")
                        .HasColumnName("EmailAddress")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "EmailAddressId");

                    b.HasIndex("EmailAddress1");

                    b.ToTable("EmailAddress","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<bool?>("CurrentFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnName("LoginID")
                        .HasMaxLength(256);

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NationalIdnumber")
                        .IsRequired()
                        .HasColumnName("NationalIDNumber")
                        .HasMaxLength(15);

                    b.Property<short?>("OrganizationLevel")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("([OrganizationNode].[GetLevel]())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("SalariedFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("SickLeaveHours");

                    b.Property<short>("VacationHours");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("LoginId")
                        .IsUnique()
                        .HasName("AK_Employee_LoginID");

                    b.HasIndex("NationalIdnumber")
                        .IsUnique()
                        .HasName("AK_Employee_NationalIDNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Employee_rowguid");

                    b.ToTable("Employee","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<short>("DepartmentId")
                        .HasColumnName("DepartmentID");

                    b.Property<byte>("ShiftId")
                        .HasColumnName("ShiftID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeDepartmentHistory","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmployeePayHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("RateChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("PayFrequency");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.HasKey("BusinessEntityId", "RateChangeDate");

                    b.ToTable("EmployeePayHistory","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ErrorLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<int>("ErrorNumber");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126);

                    b.Property<int?>("ErrorSeverity");

                    b.Property<int?>("ErrorState");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Illustration", b =>
                {
                    b.Property<int>("IllustrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IllustrationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagram")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IllustrationId");

                    b.ToTable("Illustration","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobCandidateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Resume")
                        .HasColumnType("xml");

                    b.HasKey("JobCandidateId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("JobCandidate","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Location", b =>
                {
                    b.Property<short>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8, 2)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("LocationId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Location_Name");

                    b.ToTable("Location","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Password", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Password","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Person", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<int>("EmailPromotion");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("NameStyle");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .HasMaxLength(8);

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("AdditionalContactInfo")
                        .HasName("PXML_Person_AddContact");

                    b.HasIndex("Demographics")
                        .HasName("XMLVALUE_Person_Demographics");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Person_rowguid");

                    b.HasIndex("LastName", "FirstName", "MiddleName");

                    b.ToTable("Person","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PersonCreditCard", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "CreditCardId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("PersonCreditCard","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("Phone")
                        .HasMaxLength(25);

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnName("PhoneNumberTypeID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PersonPhone","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberType","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasMaxLength(2);

                    b.Property<string>("Color")
                        .HasMaxLength(15);

                    b.Property<int>("DaysToManufacture");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FinishedGoodsFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<bool?>("MakeFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<string>("ProductLine")
                        .HasMaxLength(2);

                    b.Property<int?>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnName("ProductSubcategoryID");

                    b.Property<short>("ReorderPoint");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short>("SafetyStockLevel");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5);

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<string>("Style")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasMaxLength(3);

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Product_Name");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasName("AK_Product_ProductNumber");

                    b.HasIndex("ProductSubcategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Product_rowguid");

                    b.HasIndex("SizeUnitMeasureCode");

                    b.HasIndex("WeightUnitMeasureCode");

                    b.ToTable("Product","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductCategory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductCostHistory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductDescriptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<byte>("Bin");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Quantity");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("ProductId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("ProductInventory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductListPriceHistory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductModelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<string>("Instructions")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("CatalogDescription")
                        .HasName("PXML_ProductModel_CatalogDescription");

                    b.HasIndex("Instructions")
                        .HasName("PXML_ProductModel_Instructions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("IllustrationId")
                        .HasColumnName("IllustrationID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "IllustrationId");

                    b.HasIndex("IllustrationId");

                    b.ToTable("ProductModelIllustration","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("CultureId")
                        .HasColumnName("CultureID")
                        .HasMaxLength(6);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "CultureId");

                    b.HasIndex("CultureId");

                    b.HasIndex("ProductDescriptionId");

                    b.ToTable("ProductModelProductDescriptionCulture","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductPhotoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("LargePhoto");

                    b.Property<string>("LargePhotoFileName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ThumbNailPhoto");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50);

                    b.HasKey("ProductPhotoId");

                    b.ToTable("ProductPhoto","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("ProductPhotoId")
                        .HasColumnName("ProductPhotoID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Primary")
                        .HasColumnType("Flag");

                    b.HasKey("ProductId", "ProductPhotoId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ProductPhotoId");

                    b.ToTable("ProductProductPhoto","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductReviewID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(3850);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Comments", "ProductId", "ReviewerName")
                        .HasName("IX_ProductReview_ProductID_Name");

                    b.ToTable("ProductReview","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductSubcategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<int>("ProductCategoryId")
                        .HasColumnName("ProductCategoryID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductSubcategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ProductSubcategory_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ProductSubcategory_rowguid");

                    b.ToTable("ProductSubcategory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductVendor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<int>("AverageLeadTime");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxOrderQty");

                    b.Property<int>("MinOrderQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OnOrderQty");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("money");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.HasKey("ProductId", "BusinessEntityId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("ProductVendor","Purchasing");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int>("PurchaseOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull([OrderQty]*[UnitPrice],(0.00)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(9, 2)")
                        .HasComputedColumnSql("(isnull([ReceivedQty]-[RejectedQty],(0.00)))");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("PurchaseOrderId", "PurchaseOrderDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseOrderDetail","Purchasing");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PurchaseOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("RevisionNumber");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.Property<int>("VendorId")
                        .HasColumnName("VendorID");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader","Purchasing");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasMaxLength(25);

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38, 6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderDetail_rowguid");

                    b.HasIndex("SpecialOfferId", "ProductId");

                    b.ToTable("SalesOrderDetail","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<int>("BillToAddressId")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasMaxLength(128);

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int?>("CreditCardId")
                        .HasColumnName("CreditCardID");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnName("CurrencyRateID");

                    b.Property<int>("CustomerId")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("OrderNumber")
                        .HasMaxLength(25);

                    b.Property<byte>("RevisionNumber");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))")
                        .HasMaxLength(25);

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodId")
                        .HasColumnName("ShipMethodID");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyRateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesOrderHeader","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesReasonId")
                        .HasColumnName("SalesReasonID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SalesOrderId", "SalesReasonId");

                    b.HasIndex("SalesReasonId");

                    b.ToTable("SalesOrderHeaderSalesReason","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<decimal>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CommissionPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("money");

                    b.Property<decimal>("SalesYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesPerson_rowguid");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesPerson","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("QuotaDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("money");

                    b.HasKey("BusinessEntityId", "QuotaDate");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesPersonQuotaHistory_rowguid");

                    b.ToTable("SalesPersonQuotaHistory","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesReasonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("SalesReasonId");

                    b.ToTable("SalesReason","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTaxRate", b =>
                {
                    b.Property<int>("SalesTaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesTaxRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceId")
                        .HasColumnName("StateProvinceID");

                    b.Property<decimal>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<byte>("TaxType");

                    b.HasKey("SalesTaxRateId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTaxRate_rowguid");

                    b.HasIndex("StateProvinceId", "TaxType")
                        .IsUnique()
                        .HasName("AK_SalesTaxRate_StateProvinceID_TaxType");

                    b.ToTable("SalesTaxRate","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TerritoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CostYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("SalesYtd")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SalesYTD")
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("TerritoryId");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_SalesTerritory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTerritory_rowguid");

                    b.ToTable("SalesTerritory","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("BusinessEntityId", "StartDate", "TerritoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SalesTerritoryHistory_rowguid");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesTerritoryHistory","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ScrapReasonID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("ScrapReasonId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ScrapReason_Name");

                    b.ToTable("ScrapReason","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Shift", b =>
                {
                    b.Property<byte>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShiftID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("EndTime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("ShiftId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_Shift_Name");

                    b.HasIndex("StartTime", "EndTime")
                        .IsUnique()
                        .HasName("AK_Shift_StartTime_EndTime");

                    b.ToTable("Shift","HumanResources");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShipMethodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("ShipBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("ShipRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("ShipMethodId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_ShipMethod_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_ShipMethod_rowguid");

                    b.ToTable("ShipMethod","Purchasing");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShoppingCartItemID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnName("ShoppingCartID")
                        .HasMaxLength(50);

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId", "ProductId");

                    b.ToTable("ShoppingCartItem","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SpecialOfferID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("DiscountPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxQty");

                    b.Property<int>("MinQty");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("SpecialOfferId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SpecialOffer_rowguid");

                    b.ToTable("SpecialOffer","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnName("SpecialOfferID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("SpecialOfferId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_SpecialOfferProduct_rowguid");

                    b.ToTable("SpecialOfferProduct","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateProvinceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<bool?>("IsOnlyStateProvinceFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<int>("TerritoryId")
                        .HasColumnName("TerritoryID");

                    b.HasKey("StateProvinceId");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_StateProvince_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_StateProvince_rowguid");

                    b.HasIndex("TerritoryId");

                    b.HasIndex("StateProvinceCode", "CountryRegionCode")
                        .IsUnique()
                        .HasName("AK_StateProvince_StateProvinceCode_CountryRegionCode");

                    b.ToTable("StateProvince","Person");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Store", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("Demographics")
                        .HasName("PXML_Store_Demographics");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasName("AK_Store_rowguid");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Store","Sales");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReferenceOrderId", "ReferenceOrderLineId");

                    b.ToTable("TransactionHistory","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnName("TransactionID");

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnName("ReferenceOrderID");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnName("ReferenceOrderLineID");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReferenceOrderId", "ReferenceOrderLineId");

                    b.ToTable("TransactionHistoryArchive","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasMaxLength(3);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.HasKey("UnitMeasureCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("AK_UnitMeasure_Name");

                    b.ToTable("UnitMeasure","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Vendor", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnName("BusinessEntityID");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("AccountNumber")
                        .HasMaxLength(15);

                    b.Property<bool?>("ActiveFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("CreditRating");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Name")
                        .HasMaxLength(50);

                    b.Property<bool?>("PreferredVendorStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Flag")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PurchasingWebServiceUrl")
                        .HasColumnName("PurchasingWebServiceURL")
                        .HasMaxLength(1024);

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasName("AK_Vendor_AccountNumber");

                    b.ToTable("Vendor","Purchasing");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WorkOrderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderQty");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short?>("ScrapReasonId")
                        .HasColumnName("ScrapReasonID");

                    b.Property<short>("ScrappedQty");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("(isnull([OrderQty]-[ScrappedQty],(0)))");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScrapReasonId");

                    b.ToTable("WorkOrder","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrderID");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<short>("OperationSequence");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime");

                    b.Property<short>("LocationId")
                        .HasColumnName("LocationID");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("WorkOrderId", "ProductId", "OperationSequence");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("WorkOrderRouting","Production");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Address", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BillOfMaterials", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Component")
                        .WithMany("BillOfMaterialsComponent")
                        .HasForeignKey("ComponentId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "ProductAssembly")
                        .WithMany("BillOfMaterialsProductAssembly")
                        .HasForeignKey("ProductAssemblyId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntityAddress", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Address", "Address")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.AddressType", "AddressType")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("AddressTypeId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddress")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntityContact", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ContactType", "ContactType")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "Person")
                        .WithMany("BusinessEntityContact")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegionCurrency", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CountryRegionCode");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Currency", "CurrencyCodeNavigation")
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CurrencyCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.CurrencyRate", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Currency", "FromCurrencyCodeNavigation")
                        .WithMany("CurrencyRateFromCurrencyCodeNavigation")
                        .HasForeignKey("FromCurrencyCode");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Currency", "ToCurrencyCodeNavigation")
                        .WithMany("CurrencyRateToCurrencyCodeNavigation")
                        .HasForeignKey("ToCurrencyCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Customer", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "Person")
                        .WithMany("Customer")
                        .HasForeignKey("PersonId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Store", "Store")
                        .WithMany("Customer")
                        .HasForeignKey("StoreId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", "Territory")
                        .WithMany("Customer")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmailAddress", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntity")
                        .WithMany("EmailAddress")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntity")
                        .WithOne("Employee")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "BusinessEntity")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Department", "Department")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("ShiftId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.EmployeePayHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "BusinessEntity")
                        .WithMany("EmployeePayHistory")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.JobCandidate", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "BusinessEntity")
                        .WithMany("JobCandidate")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Password", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntity")
                        .WithOne("Password")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.Password", "BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Person", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", "BusinessEntity")
                        .WithOne("Person")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PersonCreditCard", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntity")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CreditCard", "CreditCard")
                        .WithMany("PersonCreditCard")
                        .HasForeignKey("CreditCardId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PersonPhone", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Person", "BusinessEntity")
                        .WithMany("PersonPhone")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhone")
                        .HasForeignKey("PhoneNumberTypeId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Product", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductSubcategoryId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.UnitMeasure", "SizeUnitMeasureCodeNavigation")
                        .WithMany("ProductSizeUnitMeasureCodeNavigation")
                        .HasForeignKey("SizeUnitMeasureCode");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.UnitMeasure", "WeightUnitMeasureCodeNavigation")
                        .WithMany("ProductWeightUnitMeasureCodeNavigation")
                        .HasForeignKey("WeightUnitMeasureCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductCostHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductCostHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductInventory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Location", "Location")
                        .WithMany("ProductInventory")
                        .HasForeignKey("LocationId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductInventory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductListPriceHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductListPriceHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModelIllustration", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Illustration", "Illustration")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("IllustrationId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModel", "ProductModel")
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Culture", "Culture")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("CultureId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductDescriptionId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductProductPhoto", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhoto")
                        .HasForeignKey("ProductPhotoId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductReview", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductReview")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductSubcategory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategory")
                        .HasForeignKey("ProductCategoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ProductVendor", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Vendor", "BusinessEntity")
                        .WithMany("ProductVendor")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ProductVendor")
                        .HasForeignKey("ProductId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("ProductVendor")
                        .HasForeignKey("UnitMeasureCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PurchaseOrderDetail", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("ProductId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.PurchaseOrderHeader", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetail")
                        .HasForeignKey("PurchaseOrderId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.PurchaseOrderHeader", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "Employee")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ShipMethod", "ShipMethod")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("ShipMethodId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeader")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderDetail", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SpecialOfferId", "ProductId")
                        .HasConstraintName("FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeader", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CreditCard", "CreditCard")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CurrencyRate", "CurrencyRate")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CurrencyRateId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ShipMethod", "ShipMethod")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("ShipMethodId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", "Territory")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesReason", "SalesReason")
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesReasonId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Employee", "BusinessEntity")
                        .WithOne("SalesPerson")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", "BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", "Territory")
                        .WithMany("SalesPerson")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", "BusinessEntity")
                        .WithMany("SalesPersonQuotaHistory")
                        .HasForeignKey("BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTaxRate", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.StateProvince", "StateProvince")
                        .WithMany("SalesTaxRate")
                        .HasForeignKey("StateProvinceId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("SalesTerritory")
                        .HasForeignKey("CountryRegionCode");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritoryHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", "BusinessEntity")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", "Territory")
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.ShoppingCartItem", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.SpecialOfferProduct", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("ProductId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProduct")
                        .HasForeignKey("SpecialOfferId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.StateProvince", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryRegionCode");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesTerritory", "Territory")
                        .WithMany("StateProvince")
                        .HasForeignKey("TerritoryId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Store", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", "BusinessEntity")
                        .WithOne("Store")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.Store", "BusinessEntityId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.SalesPerson", "SalesPerson")
                        .WithMany("Store")
                        .HasForeignKey("SalesPersonId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.TransactionHistory", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.Vendor", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.BusinessEntity", "BusinessEntity")
                        .WithOne("Vendor")
                        .HasForeignKey("CoreSampleApp.Business.Data.AdventureWorks2017.Vendor", "BusinessEntityId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.WorkOrder", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Product", "Product")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ProductId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.ScrapReason", "ScrapReason")
                        .WithMany("WorkOrder")
                        .HasForeignKey("ScrapReasonId");
                });

            modelBuilder.Entity("CoreSampleApp.Business.Data.AdventureWorks2017.WorkOrderRouting", b =>
                {
                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.Location", "Location")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("LocationId");

                    b.HasOne("CoreSampleApp.Business.Data.AdventureWorks2017.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRouting")
                        .HasForeignKey("WorkOrderId");
                });
#pragma warning restore 612, 618
        }
    }
}
